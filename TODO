Short-term:
-Make the program robust against interruption (atomic commits to the database, etc.)
-Pattern rules. Follow gnumake and use % as a wildcard? But allow escaping of it?
-Better error descriptions in the parser
-Parse more gnumake syntax
-Use gettext
-Allow a config file to specify the directories to be ignored (/proc, /sys, /tmp)
-Improve the situation with temporary files. I think programs that generate temporary files in the current directory don't work.
-Deal with relative vs. absolute pathnames (I think this just requires matching either in the target of a rule)
-Add more options for update detection (currently is timestamp, add hash, and timestamp then hash)

Medium-term:
-Implement a jam parser
-Track targets as well an dependencies, make an automatic clean mode
-Mode to output when dependencies differ from the dependencies specified (to verify that fallback is working for platforms that can't support ptmake)
-Multiple threads for building

Long-term:
-Turn everything except the parsers and driver into a library that can be shared among the backends.
-See if I can use this as a backend with gnumake's frontend
-Implement a daemon mode that monitors the filesystem for changes to any dependencies
